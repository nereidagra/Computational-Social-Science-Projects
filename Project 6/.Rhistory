results <- results %>%
add_row(ATT = NA, balanced_proportion = NA, mean_improvement = NA)
}
}
return(list(results = results, balance_plots = balance_plots))
}
simulation_output <- run_simulation(ypsps_clean, num_simulations = 10)
set.seed(42)
n <- 1000
ypsps_clean <- tibble(
college = rbinom(n, 1, 0.5),  # Simulating binary treatment (college vs non-college)
student_ppnscal = rnorm(n),    # Simulating outcome variable
cov1 = rnorm(n),
cov2 = rnorm(n),
cov3 = rnorm(n),
cov4 = rnorm(n),
cov5 = rnorm(n)
)
# Run the simulation with 10 iterations
simulation_output <- run_simulation(ypsps_clean, num_simulations = 10)
ypsps_clean <- ypsps %>%
mutate(ATT = NA, balanced_proportion = NA, mean_improvement = NA)  %>%
select(-contains("1973"), -contains("1982"))
glimpse(ypsps_clean)
run_simulation <- function(data, num_simulations = 10) {
results <- tibble()
balance_plots <- list()
for (i in 1:num_simulations) {
# Randomly select covariates (between 1 to 5 random covariates)
covariates <- sample(names(data)[!names(data) %in% c("college", "student_ppnscal")],
size = sample(1:5, 1))  # Randomly select covariates excluding treatment and outcome
# Build the propensity score model formula
formula <- as.formula(paste("college ~", paste(covariates, collapse = " + ")))
# Fit the propensity score model
match_model <- matchit(formula, data = data, method = "nearest", distance = "logit")
# Calculate ATT
att <- summary(match_model)$sum.matched['ATT']
# Extract balance information from the matching model summary
smd_data <- summary(match_model)$covariate.balance
# Check if smd_data is NULL or empty before processing
if (!is.null(smd_data) && nrow(smd_data) > 0) {
smd <- smd_data %>%
mutate(balanced = smd <= 0.1)  # Mark covariates with SMD <= 0.1 as balanced
# Proportion of balanced covariates
balanced_proportion <- mean(smd$balanced, na.rm = TRUE)
# Mean percent improvement in SMD
mean_improvement <- mean(smd$improvement, na.rm = TRUE)
# Store results for this run
results <- results %>%
add_row(ATT = att, balanced_proportion = balanced_proportion, mean_improvement = mean_improvement)
# Create covariate balance plot
balance_plot <- ggplot(smd, aes(x = covariate, y = smd)) +
geom_bar(stat = "identity", fill = ifelse(smd <= 0.1, "blue", "red")) +
coord_flip() +
theme_minimal() +
labs(title = paste("Balance for Run", i), x = "Covariate", y = "SMD") +
theme(axis.text.y = element_text(size = 8))
balance_plots[[i]] <- balance_plot
} else {
# If no valid balance data, record NA for ATT and balance stats
results <- results %>%
add_row(ATT = NA, balanced_proportion = NA, mean_improvement = NA)
}
}
return(list(results = results, balance_plots = balance_plots))
}
# Run the simulation with 10 iterations
simulation_output <- run_simulation(ypsps_clean, num_simulations = 10)
glimpse
run_simulation <- function(data, num_simulations = 10) {
results <- tibble()
balance_plots <- list()
for (i in 1:num_simulations) {
# Randomly select covariates (between 1 to 5 random covariates)
covariates <- sample(names(data)[!names(data) %in% c("college", "student_ppnscal")],
size = sample(1:5, 1))  # Randomly select covariates excluding treatment and outcome
# Build the propensity score model formula
formula <- as.formula(paste("college ~", paste(covariates, collapse = " + ")))
# Fit the propensity score model
match_model <- matchit(formula, data = data, method = "nearest", distance = "logit")
# Calculate ATT
att <- summary(match_model)$sum.matched['ATT']
# Extract balance information from the matching model summary
smd_data <- summary(match_model)$covariate.balance
# Check if smd_data is NULL or empty before processing
if (!is.null(smd_data) && nrow(smd_data) > 0) {
smd <- smd_data %>%
mutate(balanced = smd <= 0.1)  # Mark covariates with SMD <= 0.1 as balanced
# Proportion of balanced covariates
balanced_proportion <- mean(smd$balanced, na.rm = TRUE)
# Mean percent improvement in SMD
mean_improvement <- mean(smd$improvement, na.rm = TRUE)
# Store results for this run
results <- results %>%
add_row(ATT = att, balanced_proportion = balanced_proportion, mean_improvement = mean_improvement)
# Create covariate balance plot
balance_plot <- ggplot(smd, aes(x = covariate, y = smd)) +
geom_bar(stat = "identity", fill = ifelse(smd <= 0.1, "blue", "red")) +
coord_flip() +
theme_minimal() +
labs(title = paste("Balance for Run", i), x = "Covariate", y = "SMD") +
theme(axis.text.y = element_text(size = 8))
balance_plots[[i]] <- balance_plot
} else {
# If no valid balance data, record NA for ATT and balance stats
results <- results %>%
add_row(ATT = NA, balanced_proportion = NA, mean_improvement = NA)
}
}
return(list(results = results, balance_plots = balance_plots))
}
# Run the simulation with 10 iterations
simulation_output <- run_simulation(ypsps_clean, num_simulations = 10)
# Proportion of balanced covariates
balanced_proportion <- mean(smd$balanced, na.rm = TRUE)
run_simulation <- function(data, num_simulations = 10) {
results <- tibble(
ATT = numeric(),
balanced_proportion = numeric(),
mean_improvement = numeric()
)
balance_plots <- list()
for (i in 1:num_simulations) {
# Randomly select covariates (between 1 and 5 random covariates)
covariates <- sample(names(data)[!names(data) %in% c("college", "student_ppnscal")],
size = sample(1:5, 1))  # Randomly select covariates excluding treatment and outcome
# Build the propensity score model formula
formula <- as.formula(paste("college ~", paste(covariates, collapse = " + ")))
# Fit the propensity score model
match_model <- matchit(formula, data = data, method = "nearest", distance = "logit")
# Calculate ATT
att <- summary(match_model)$sum.matched['ATT']
# Extract balance information from the matching model summary
smd_data <- summary(match_model)$covariate.balance
# Check if smd_data is NULL or empty before processing
if (!is.null(smd_data) && nrow(smd_data) > 0) {
smd <- smd_data %>%
mutate(balanced = smd <= 0.1)  # Mark covariates with SMD <= 0.1 as balanced
# Proportion of balanced covariates
balanced_proportion <- mean(smd$balanced, na.rm = TRUE)
# Mean percent improvement in SMD
mean_improvement <- mean(smd$improvement, na.rm = TRUE)
# Store results for this run
results <- results %>%
add_row(ATT = att, balanced_proportion = balanced_proportion, mean_improvement = mean_improvement)
# Create covariate balance plot
balance_plot <- ggplot(smd, aes(x = covariate, y = smd)) +
geom_bar(stat = "identity", fill = ifelse(smd <= 0.1, "blue", "red")) +
coord_flip() +
theme_minimal() +
labs(title = paste("Balance for Run", i), x = "Covariate", y = "SMD") +
theme(axis.text.y = element_text(size = 8))
balance_plots[[i]] <- balance_plot
} else {
# If no valid balance data, record NA for ATT and balance stats
results <- results %>%
add_row(ATT = NA, balanced_proportion = NA, mean_improvement = NA)
}
}
return(list(results = results, balance_plots = balance_plots))
}
# Run the simulation with 10 iterations
simulation_output <- run_simulation(ypsps_clean, num_simulations = 10)
for (i in 1:num_simulations) {
# Randomly select covariates (between 1 and 5 random covariates)
covariates <- sample(names(data)[!names(data) %in% c("college", "student_ppnscal")],
size = sample(1:5, 1))  # Randomly select covariates excluding treatment and outcome
# Build the propensity score model formula
formula <- as.formula(paste("college ~", paste(covariates, collapse = " + ")))
# Fit the propensity score model
match_model <- matchit(formula, data = data, method = "nearest", distance = "logit")
# Calculate ATT
att <- summary(match_model)$sum.matched['ATT']
# Extract balance information from the matching model summary
smd_data <- summary(match_model)$covariate.balance
# Check if smd_data is NULL or empty before processing
if (!is.null(smd_data) && nrow(smd_data) > 0) {
smd <- smd_data %>%
mutate(balanced = smd <= 0.1)  # Mark covariates with SMD <= 0.1 as balanced
# Proportion of balanced covariates
balanced_proportion <- mean(smd$balanced, na.rm = TRUE)
# Mean percent improvement in SMD
mean_improvement <- mean(smd$improvement, na.rm = TRUE)
# Store results for this run
results <- results %>%
add_row(ATT = att, balanced_proportion = balanced_proportion, mean_improvement = mean_improvement)
# Create covariate balance plot
balance_plot <- ggplot(smd, aes(x = covariate, y = smd)) +
geom_bar(stat = "identity", fill = ifelse(smd <= 0.1, "blue", "red")) +
coord_flip() +
theme_minimal() +
labs(title = paste("Balance for Run", i), x = "Covariate", y = "SMD") +
theme(axis.text.y = element_text(size = 8))
balance_plots[[i]] <- balance_plot
} else {
# If no valid balance data, record NA for ATT and balance stats
results <- results %>%
add_row(ATT = NA, balanced_proportion = NA, mean_improvement = NA)
}
}
run_simulation <- function(data, num_simulations = 1000) {
results <- tibble(
ATT = numeric(),
balanced_proportion = numeric(),
mean_improvement = numeric()
)
balance_plots <- list()
for (i in 1:num_simulations) {
# Randomly select covariates (between 1 and 5 random covariates)
covariates <- sample(names(data)[!names(data) %in% c("college", "student_ppnscal")],
size = sample(1:5, 1))  # Randomly select covariates excluding treatment and outcome
# Build the propensity score model formula
formula <- as.formula(paste("college ~", paste(covariates, collapse = " + ")))
# Fit the propensity score model
match_model <- matchit(formula, data = data, method = "nearest", distance = "logit")
# Calculate ATT
att <- summary(match_model)$sum.matched['ATT']
# Extract balance information from the matching model summary
smd_data <- summary(match_model)$covariate.balance
# Check if smd_data is NULL or empty before processing
if (!is.null(smd_data) && nrow(smd_data) > 0) {
smd <- smd_data %>%
mutate(balanced = smd <= 0.1)  # Mark covariates with SMD <= 0.1 as balanced
# Proportion of balanced covariates
balanced_proportion <- mean(smd$balanced, na.rm = TRUE)
# Mean percent improvement in SMD
mean_improvement <- mean(smd$improvement, na.rm = TRUE)
# Store results for this run
results <- results %>%
add_row(ATT = att, balanced_proportion = balanced_proportion, mean_improvement = mean_improvement)
# Create covariate balance plot
balance_plot <- ggplot(smd, aes(x = covariate, y = smd)) +
geom_bar(stat = "identity", fill = ifelse(smd <= 0.1, "blue", "red")) +
coord_flip() +
theme_minimal() +
labs(title = paste("Balance for Run", i), x = "Covariate", y = "SMD") +
theme(axis.text.y = element_text(size = 8))
balance_plots[[i]] <- balance_plot
} else {
# If no valid balance data, record NA for ATT and balance stats
results <- results %>%
add_row(ATT = NA, balanced_proportion = NA, mean_improvement = NA)
}
}
return(list(results = results, balance_plots = balance_plots))
}
# Run the simulation with 10 iterations
simulation_output <- run_simulation(ypsps_clean, num_simulations = 1000)
ypsps_clean <- ypsps %>%
mutate(ATT = NA, balanced_proportion = NA, mean_improvement = NA)  %>%
select(-contains("1973"), -contains("1982"))
glimpse(ypsps_clean)
run_simulation <- function(data, num_simulations = 1000) {
results <- tibble(
ATT = numeric(),
balanced_proportion = numeric(),
mean_improvement = numeric()
)
balance_plots <- list()
for (i in 1:num_simulations) {
# Randomly select covariates (between 1 and 5 random covariates)
covariates <- sample(names(data)[!names(data) %in% c("college", "student_ppnscal")],
size = sample(1:5, 1))  # Randomly select covariates excluding treatment and outcome
# Build the propensity score model formula
formula <- as.formula(paste("college ~", paste(covariates, collapse = " + ")))
# Fit the propensity score model
match_model <- matchit(formula, data = data, method = "nearest", distance = "logit")
# Calculate ATT
att <- summary(match_model)$sum.matched['ATT']
# Extract balance information from the matching model summary
smd_data <- summary(match_model)$covariate.balance
# Check if smd_data is NULL or empty before processing
if (!is.null(smd_data) && nrow(smd_data) > 0) {
smd <- smd_data %>%
mutate(balanced = smd <= 0.1)  # Mark covariates with SMD <= 0.1 as balanced
# Proportion of balanced covariates
balanced_proportion <- mean(smd$balanced, na.rm = TRUE)
# Mean percent improvement in SMD
mean_improvement <- mean(smd$improvement, na.rm = TRUE)
# Store results for this run
results <- results %>%
add_row(ATT = att, balanced_proportion = balanced_proportion, mean_improvement = mean_improvement)
# Create covariate balance plot
balance_plot <- ggplot(smd, aes(x = covariate, y = smd)) +
geom_bar(stat = "identity", fill = ifelse(smd <= 0.1, "blue", "red")) +
coord_flip() +
theme_minimal() +
labs(title = paste("Balance for Run", i), x = "Covariate", y = "SMD") +
theme(axis.text.y = element_text(size = 8))
balance_plots[[i]] <- balance_plot
} else {
# If no valid balance data, record NA for ATT and balance stats
results <- results %>%
add_row(ATT = NA, balanced_proportion = NA, mean_improvement = NA)
}
}
return(list(results = results, balance_plots = balance_plots))
}
# Run the simulation with 10 iterations
simulation_output <- run_simulation(ypsps_clean, num_simulations = 1000)
run_simulation <- function(data, num_simulations = 100) {
results <- tibble(
ATT = numeric(),
balanced_proportion = numeric(),
mean_improvement = numeric()
)
balance_plots <- list()
for (i in 1:num_simulations) {
# Randomly select covariates (between 1 and 5 random covariates)
covariates <- sample(names(data)[!names(data) %in% c("college", "student_ppnscal")],
size = sample(1:5, 1))  # Randomly select covariates excluding treatment and outcome
# Build the propensity score model formula
formula <- as.formula(paste("college ~", paste(covariates, collapse = " + ")))
# Fit the propensity score model
match_model <- matchit(formula, data = data, method = "nearest", distance = "logit")
# Calculate ATT
att <- summary(match_model)$sum.matched['ATT']
# Extract balance information from the matching model summary
smd_data <- summary(match_model)$covariate.balance
# Check if smd_data is NULL or empty before processing
if (!is.null(smd_data) && nrow(smd_data) > 0) {
smd <- smd_data %>%
mutate(balanced = smd <= 0.1)  # Mark covariates with SMD <= 0.1 as balanced
# Proportion of balanced covariates
balanced_proportion <- mean(smd$balanced, na.rm = TRUE)
# Mean percent improvement in SMD
mean_improvement <- mean(smd$improvement, na.rm = TRUE)
# Store results for this run
results <- results %>%
add_row(ATT = att, balanced_proportion = balanced_proportion, mean_improvement = mean_improvement)
# Create covariate balance plot
balance_plot <- ggplot(smd, aes(x = covariate, y = smd)) +
geom_bar(stat = "identity", fill = ifelse(smd <= 0.1, "blue", "red")) +
coord_flip() +
theme_minimal() +
labs(title = paste("Balance for Run", i), x = "Covariate", y = "SMD") +
theme(axis.text.y = element_text(size = 8))
balance_plots[[i]] <- balance_plot
} else {
# If no valid balance data, record NA for ATT and balance stats
results <- results %>%
add_row(ATT = NA, balanced_proportion = NA, mean_improvement = NA)
}
}
return(list(results = results, balance_plots = balance_plots))
}
# Run the simulation with 10 iterations
simulation_output <- run_simulation(ypsps_clean, num_simulations = 100)
run_simulation <- function(data, num_simulations = 1000) {
results <- tibble(
ATT = numeric(),
balanced_proportion = numeric(),
mean_improvement = numeric()
)
balance_plots <- list()
for (i in 1:num_simulations) {
# Randomly select covariates (between 1 and 5 random covariates)
covariates <- sample(names(data)[!names(data) %in% c("college", "student_ppnscal")],
size = sample(1:5, 1))  # Random covariates excluding treatment and outcome
# Build the propensity score model formula
formula <- as.formula(paste("college ~", paste(covariates, collapse = " + ")))
# Fit the propensity score model
match_model <- matchit(formula, data = data, method = "nearest", distance = "logit")
# Calculate ATT
att <- summary(match_model)$sum.matched['ATT']
# Extract balance information from the matching model summary
smd_data <- summary(match_model)$covariate.balance
# Check if smd_data is NULL or empty before processing
if (!is.null(smd_data) && nrow(smd_data) > 0) {
smd <- smd_data %>%
mutate(balanced = smd <= 0.1)  # Mark covariates with SMD <= 0.1 as balanced
# Proportion of balanced covariates
balanced_proportion <- mean(smd$balanced, na.rm = TRUE)
# Mean percent improvement in SMD
mean_improvement <- mean(smd$improvement, na.rm = TRUE)
# Store results for this run
results <- results %>%
add_row(ATT = att, balanced_proportion = balanced_proportion, mean_improvement = mean_improvement)
# Create covariate balance plot
balance_plot <- ggplot(smd, aes(x = covariate, y = smd)) +
geom_bar(stat = "identity", fill = ifelse(smd <= 0.1, "blue", "red")) +
coord_flip() +
theme_minimal() +
labs(title = paste("Balance for Run", i), x = "Covariate", y = "SMD") +
theme(axis.text.y = element_text(size = 8))
balance_plots[[i]] <- balance_plot
} else {
# If no valid balance data, record NA for ATT and balance stats
results <- results %>%
add_row(ATT = NA, balanced_proportion = NA, mean_improvement = NA)
}
}
return(list(results = results, balance_plots = balance_plots))
}
# Run the simulation with 10 iterations
simulation_output <- run_simulation(ypsps_clean, num_simulations = 1000)
ypsps_clean
glimpse(ypsps_clean)
# Run the simulation with 10 iterations
simulation_output <- run_simulation(ypsps_clean, num_simulations = 1000)
ypsps_clean <- ypsps %>%
mutate(ATT = NA, balanced_proportion = NA, mean_improvement = NA)  %>%
select(-contains("1973"), -contains("1982"))
glimpse(ypsps_clean)
run_simulation <- function(data, num_simulations = 1000) {
results <- tibble(
ATT = numeric(),
balanced_proportion = numeric(),
mean_improvement = numeric()
)
balance_plots <- list()
for (i in 1:num_simulations) {
# Randomly select covariates (between 1 and 5 random covariates)
covariates <- sample(names(data)[!names(data) %in% c("college", "student_ppnscal")],
size = sample(1:5, 1))  # Random covariates excluding treatment and outcome
# Build the propensity score model formula
formula <- as.formula(paste("college ~", paste(covariates, collapse = " + ")))
# Fit the propensity score model
match_model <- matchit(formula, data = data, method = "nearest", distance = "logit")
# Calculate ATT
att <- summary(match_model)$sum.matched['ATT']
# Extract balance information from the matching model summary
smd_data <- summary(match_model)$covariate.balance
# Check if smd_data is NULL or empty before processing
if (!is.null(smd_data) && nrow(smd_data) > 0) {
smd <- smd_data %>%
mutate(balanced = smd <= 0.1)  # Mark covariates with SMD <= 0.1 as balanced
# Proportion of balanced covariates
balanced_proportion <- mean(smd$balanced, na.rm = TRUE)
# Mean percent improvement in SMD
mean_improvement <- mean(smd$improvement, na.rm = TRUE)
# Store results for this run
results <- results %>%
add_row(ATT = att, balanced_proportion = balanced_proportion, mean_improvement = mean_improvement)
# Create covariate balance plot
balance_plot <- ggplot(smd, aes(x = covariate, y = smd)) +
geom_bar(stat = "identity", fill = ifelse(smd <= 0.1, "blue", "red")) +
coord_flip() +
theme_minimal() +
labs(title = paste("Balance for Run", i), x = "Covariate", y = "SMD") +
theme(axis.text.y = element_text(size = 8))
balance_plots[[i]] <- balance_plot
} else {
# If no valid balance data, record NA for ATT and balance stats
results <- results %>%
add_row(ATT = NA, balanced_proportion = NA, mean_improvement = NA)
}
}
return(list(results = results, balance_plots = balance_plots))
}
glimpse(ypsps_clean)
# Run the simulation with 10 iterations
simulation_output <- run_simulation(ypsps_clean, num_simulations = 1000)
# I think rows with missing values are messing me up
ypsps_clean <- na.omit(ypsps_clean)
glimpse(ypsps_clean)
ypsps_clean <- ypsps %>%
mutate(ATT = NA, balanced_proportion = NA, mean_improvement = NA)  %>%
select(-contains("1973"), -contains("1982"))
#Also it keeps saying that I have an imbalance between treatment and control.
table(ypsps_clean$college)  # Assuming "college" is the treatment variable
ypsps_clean <- ypsps %>%
mutate(ATT = NA, balanced_proportion = NA, mean_improvement = NA)  %>%
select(-contains("1973"), -contains("1982"))
run_simulation <- function(data, num_simulations = 1000) {
results <- tibble(
ATT = numeric(),
balanced_proportion = numeric(),
mean_improvement = numeric()
)
balance_plots <- list()
for (i in 1:num_simulations) {
# Randomly select covariates (between 1 and 5 random covariates)
covariates <- sample(names(data)[!names(data) %in% c("college", "student_ppnscal")],
size = sample(1:5, 1))  # Random covariates excluding treatment and outcome
# Build the propensity score model formula
formula <- as.formula(paste("college ~", paste(covariates, collapse = " + ")))
# Fit the ps model. Was using "nearest" but it seems like since there's almost two treatment observations for every control, "full" would be better as a method, since it matches more than 1:1
match_model <- matchit(formula, data = data, method = "full", distance = "logit")
# Calculate ATT
att <- summary(match_model)$sum.matched['ATT']
# Extract balance information from the matching model summary
smd_data <- summary(match_model)$covariate.balance
# Check if smd_data is NULL or empty before processing
if (!is.null(smd_data) && nrow(smd_data) > 0) {
smd <- smd_data %>%
mutate(balanced = smd <= 0.1)  # Mark covariates with SMD <= 0.1 as balanced
# Proportion of balanced covariates
balanced_proportion <- mean(smd$balanced, na.rm = TRUE)
# Mean percent improvement in SMD
mean_improvement <- mean(smd$improvement, na.rm = TRUE)
# Store results for this run
results <- results %>%
add_row(ATT = att, balanced_proportion = balanced_proportion, mean_improvement = mean_improvement)
# Create covariate balance plot
balance_plot <- ggplot(smd, aes(x = covariate, y = smd)) +
geom_bar(stat = "identity", fill = ifelse(smd <= 0.1, "blue", "red")) +
coord_flip() +
theme_minimal() +
labs(title = paste("Balance for Run", i), x = "Covariate", y = "SMD") +
theme(axis.text.y = element_text(size = 8))
balance_plots[[i]] <- balance_plot
} else {
# If no valid balance data, record NA for ATT and balance stats
results <- results %>%
add_row(ATT = NA, balanced_proportion = NA, mean_improvement = NA)
}
}
return(list(results = results, balance_plots = balance_plots))
}
# Run the simulation with 10 iterations
simulation_output <- run_simulation(ypsps_clean, num_simulations = 1000)
