#install.packages("C:/Users/MACKGS~1/AppData/Local/Temp/RtmpiszvSs/filef4a06b5d5e78/MCPanel_0.0.tar.gz", repos = NULL, type = "source")
#devtools::install_github("ebenmichael/augsynth")
install.packages("tinytex")
tinytex::install_tinytex()
pacman::p_load(# Tidyverse packages including dplyr and ggplot2
tidyverse,
ggthemes,
augsynth,
gsynth)
library(dplyr)
library(augsynth)
library(ggplot2)
library(tidyr)
#library(MCPanel) # this worked once but I haven't been able to get it to work again. It also didn't change the outcome, so I'm giving up on it for now
library(lubridate)
library(knitr)
# set seed
set.seed(44)
# load data
medicaid_expansion <- read_csv('./data/medicaid_expansion.csv')
#medicaid_expansion <- read_csv("C:/git/Computational-Social-Science-Projects/Project 7/data/medicaid_expansion.csv")
# highest and lowest uninsured rates
medicaid_expansion_to_2014 <- medicaid_expansion %>%
filter(year >= 2008, year < 2014)
##nope
ggplot(medicaid_expansion_to_2014, aes(x = year, y = uninsured_rate, group = State, color = State)) +
geom_line() +
labs(title = "Uninsured Rate by State (2008–2013)",
x = "Year",
y = "Uninsured Rate (%)") +
theme_minimal()
#messy but effective
ggplot(medicaid_expansion_to_2014, aes(x = year, y = uninsured_rate, group = State)) +
geom_line(alpha = 0.7) +  # Lines, slightly transparent
geom_text(data = medicaid_expansion_to_2014 %>% filter(year == 2013),
aes(label = State),
hjust = 0, vjust = 0.5, size = 2) +  # Labels at the end of lines
labs(title = "Uninsured Rate by State (2008–2014)",
x = "Year",
y = "Uninsured Rate (%)") +
theme_minimal() +
theme(legend.position = "none") +
xlim(2008, 2014)
##trying something else -- highest by average across 2008-2014
state_summary <- medicaid_expansion_to_2014 %>%
group_by(State) %>%
summarize(avg_uninsured_rate = mean(uninsured_rate, na.rm = TRUE)) %>%
arrange(desc(avg_uninsured_rate))
highest_state <- state_summary$State[1]
lowest_state <- state_summary$State[nrow(state_summary)]
#same viz, just highlighting those ones
ggplot(medicaid_expansion_to_2014, aes(x = year, y = uninsured_rate, group = State)) +
geom_line(aes(color = State %in% c(highest_state, lowest_state)), linewidth = 1) +
scale_color_manual(values = c("gray", "red")) + # Highlight selected states in red
geom_text(data = medicaid_expansion_to_2014 %>%
filter(State %in% c(highest_state, lowest_state), year == 2013),
aes(label = State),
hjust = -0.1, size = 3) +
labs(title = "Uninsured Rate by State (2008–2013)",
subtitle = paste("Highlighting:", highest_state, "(highest) and", lowest_state, "(lowest)"),
x = "Year",
y = "Uninsured Rate (%)",
color = "Highlighted State") +
theme_minimal() +
theme(legend.position = "none") # Remove legend if you want it cleaner
# most uninsured Americans prior to 2014
medicaid_expansion_uninsured <- medicaid_expansion %>%
mutate(uninsured_total = (uninsured_rate / 100) * population) %>%
filter(year >= 2008, year < 2014)
ggplot(medicaid_expansion_uninsured, aes(x = year, y = uninsured_total, group = State)) +
geom_line(alpha = 0.7) +  # Lines, slightly transparent
geom_text(data = medicaid_expansion_uninsured %>% filter(year == 2013),
aes(label = State),
hjust = 0, vjust = 0.5, size = 2) +  # Labels at the end of lines
labs(title = "Total Uninsured by State (2008–2013)",
x = "Year",
y = "Uninsured Total") +
theme_minimal() +
theme(legend.position = "none") +
xlim(2008, 2014)
#Average
state_summary_uninsured <- medicaid_expansion_uninsured %>%
group_by(State) %>%
summarize(avg_uninsured_total = mean(uninsured_total, na.rm = TRUE)) %>%
arrange(desc(avg_uninsured_total))
highest_state_uninsured <- state_summary_uninsured$State[1]
lowest_state_uninsured <- state_summary_uninsured$State[nrow(state_summary_uninsured)]
ggplot(medicaid_expansion_uninsured, aes(x = year, y = uninsured_total, group = State)) +
geom_line(color = "gray", size = 0.8) +  # All lines gray
geom_line(data = medicaid_expansion_uninsured %>% filter(State %in% c(highest_state_uninsured, lowest_state_uninsured)),
aes(color = State), size = 1.2) +  # Highlight important states
geom_text(data = medicaid_expansion_uninsured %>%
filter(State %in% c(highest_state_uninsured, lowest_state_uninsured), year == 2013),
aes(label = State),
hjust = 0, vjust = 0.5, size = 3.5, fontface = "bold") +
labs(title = "Number of Uninsured People by State (2008–2014)",
subtitle = paste("Highlighting", highest_state_uninsured, "(highest) and", lowest_state_uninsured, "(lowest)"),
x = "Year",
y = "Total Uninsured",
color = "State") +
theme_minimal() +
theme(legend.position = "none") +
xlim(2008, 2014)
# most uninsured Americans in 2020. DC is empty, it isn't really the most
medicaid_expansion_uninsured_2020 <- medicaid_expansion %>%
mutate(uninsured_total = (uninsured_rate / 100) * population) %>%
filter(year == 2020)
ggplot(medicaid_expansion_uninsured_2020, aes(x = reorder(State, uninsured_total), y = uninsured_total)) +
geom_point(size = 3, color = "skyblue") +  # Dot plot
geom_text(aes(label = scales::comma(uninsured_total)), vjust = -0.5, size = 3) +  # Labels on dots
labs(title = "Total Uninsured by State (2020)",
x = "State",
y = "Uninsured Total") +
theme_minimal() +
theme(legend.position = "none") +
coord_flip()  # Flip to make it horizontal for better readability
#set of states that expanded on the date of interest
expanded_on_dof <- medicaid_expansion %>%
filter(Date_Adopted == as.Date("2014-01-01")) %>%
distinct(State)
#Somehow took forever just to figure out how to see them all at once
# print(expanded_on_dof)
# print(expanded_on_dof, n = 30)
# view(expanded_on_dof)
print(expanded_on_dof$State)
# set of states that didn't expand
not_expanded <- medicaid_expansion %>%
filter(is.na(Date_Adopted)) %>%
distinct(State)
print(not_expanded$State)
# Parallel Trends plot: Arkansas and Kansas -- pretty good!
# Just Kansas and Arkansas
states_to_compare <- medicaid_expansion %>%
filter(State %in% c("Kansas", "Arkansas"),
year >= 2008, year < 2014)  # Pre-treatment years
ggplot(states_to_compare, aes(x = year, y = uninsured_rate, color = State)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
labs(title = "Uninsured Rate: Kansas vs Arkansas (2008–2014)",
x = "Year",
y = "Uninsured Rate (%)",
color = "State") +
theme_minimal()
# Parallel Trends plot: California and Texas: definitely not, terrible choices
states_to_compare <- medicaid_expansion %>%
filter(State %in% c("Texas", "California"),
year >= 2008, year < 2014)  # Pre-treatment years
ggplot(states_to_compare, aes(x = year, y = uninsured_rate, color = State)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
labs(title = "Uninsured Rate: CA vs TX (2008–2014)",
x = "Year",
y = "Uninsured Rate (%)",
color = "State") +
theme_minimal()
# Parallel Trends plot: Ohio and Missouri: also fairly poor trend match
states_to_compare <- medicaid_expansion %>%
filter(State %in% c("Missouri", "Ohio"),
year >= 2008, year < 2014)  # Pre-treatment years
ggplot(states_to_compare, aes(x = year, y = uninsured_rate, color = State)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
labs(title = "Uninsured Rate: OH vs MS (2008–2014)",
x = "Year",
y = "Uninsured Rate (%)",
color = "State") +
theme_minimal()
# Difference-in-Differences estimation
# DiD for: Kansas-Arkansas. trying the point in time/subtraction thing
# ----------------------------------------------------------------
# create a dataset for Kansas and Arkansas
states_of_int <-
medicaid_expansion %>%
filter(State %in% c("Kansas","Arkansas")) %>%
filter(between(year, 2012, 2015)) #I don't think I need this actually? Also -- using "between", is there a way to not include the boundaries (like in the filter year > 2014 that I was doing before?
glimpse(states_of_int)
# pre-treatment difference
# ----------
pre_diff <-
states_of_int %>%
# filter out only the quarter we want
filter(year == 2012) %>%
# subset to select only vars we want
select(State,
uninsured_rate) %>%
# make the data wide
pivot_wider(names_from = State,
values_from = uninsured_rate) %>%
# subtract to make calculation
summarise(Kansas - Arkansas)
glimpse(pre_diff)
# post-treatment difference
# ----------
post_diff <-
states_of_int %>%
# filter out only the quarter we want
filter(year == 2015) %>%
# subset to select only vars we want
select(State,
uninsured_rate) %>%
# make the data wide
pivot_wider(names_from = State,
values_from = uninsured_rate) %>%
# subtract to make calculation
summarise(Kansas - Arkansas)
glimpse(post_diff)
# diff-in-diffs
# ----------
diff_in_diffs <- post_diff - pre_diff
diff_in_diffs
#looking at my options
late_expanders <- medicaid_expansion %>%
filter(Date_Adopted > as.Date("2015-01-01")) %>%
distinct(State, Date_Adopted)
print(late_expanders)
#want to pick a state with an average population, Louisiana is a good bet
medicaid_expansion_late <- medicaid_expansion %>%
filter(State %in% late_expanders$State) %>%
filter(year == 2016)
print(medicaid_expansion_late)
# non-augmented synthetic control using Louisiana
#define a treatment var. Uisng 2017 as first true post-treatment year since the adoption was mid-2016
medicaid_expansion <- medicaid_expansion %>%
mutate(treatment = if_else(State == "Louisiana" & year >= 2017, 1, 0))
# Run non-augmented synthetic control for Louisiana
syn_louisiana <- augsynth(
uninsured_rate ~ treatment,   # outcome ~ treatment indicator
unit = State,                 # unit of analysis
time = year,                  # time variable
t_int = 2017,
data = medicaid_expansion,   # your dataset
unit_name = "Louisiana",     # treated unit
progfunc = "None",           # no augmentation (use "ridge" for augmented)
scm = TRUE                   # use synthetic control method
)
# # View summary of results
# this is not working not sure why
# summary(syn_louisiana)
#
#
# att <- summary(syn_louisiana)$att.avg
# imbalance <- summary(syn_louisiana)$imbalance
#
# print(att)
# print(imbalance)
syn_summary <- summary(syn_louisiana)
glimpse(syn_summary)
att <- syn_summary$average_att$Estimate
pval <- syn_summary$average_att$p_val
imbalance <- syn_summary$l2_imbalance
improvement <- 1 - (syn_summary$scaled_l2_imbalance / syn_summary$l2_imbalance)
print(att)
print(pval)
print(imbalance)
print(improvement)
str(syn_louisiana) # what even is the data now
head(syn_louisiana)
# Extract time and outcome values
#time_vals <- as.integer(colnames(syn_louisiana$data$X))  # Tried to get the years from column names
#needed to hard code it bc it was too hard to extract the years
time_vals <- 2008:2020
#time_vals <- syn_louisiana$data$synth_data$Y0plot[,1]  # Assuming time is the same for all units?
actual_vals <- syn_louisiana$data$synth_data$Y1plot[,1]  # treated LA outcome
synthetic_vals <- syn_louisiana$data$synth_data$Y0plot[,1]  # synthetic control outcome
# Check the extracted values
head(time_vals)
head(actual_vals)
print(synthetic_vals)
# Create a data frame with columns for Year, Actual, and Synthetic
outcome_df <- data.frame(
Year = time_vals,
Actual = actual_vals,
Synthetic = synthetic_vals
)
#is this working
head(outcome_df)
summary(outcome_df)
#plots
#pre-treatment plot
# Convert to long format for ggplot
# Make sure the reshaping process is working correctly
outcome_long <- pivot_longer(outcome_df,
cols = c("Actual", "Synthetic"),
names_to = "Type",
values_to = "UninsuredRate")
# Check the reshaped data frame
head(outcome_long)
# Check
head(outcome_long)
# Create the plot
#pre-treatment
ggplot(outcome_long, aes(x = Year, y = UninsuredRate, color = Type, linetype = Type)) +
geom_line(size = 1.2) +
geom_vline(xintercept = syn_louisiana$t_int, linetype = "dashed", color = "gray40") +  # Treatment time
labs(
title = "Actual vs Synthetic Uninsured Rate in Louisiana",
x = "Year",
y = "Uninsured Rate",
color = "Legend",
linetype = "Legend"
) +
theme_minimal()
#post-treatment
library(ggplot2)
# Extract ATT time-series
att_df <- summary(syn_louisiana)$att
ggplot(att_df, aes(x = Time, y = Estimate)) +
geom_line(color = "darkred", size = 1.2) +
geom_vline(xintercept = summary(syn_louisiana)$t_int, linetype = "dashed", color = "gray40") +
geom_hline(yintercept = 0, linetype = "solid", color = "black") +
labs(
title = "Post-Treatment Differences: Louisiana vs Synthetic Control",
subtitle = "Estimated ATT (Treated - Synthetic) Over Time",
x = "Year",
y = "ATT (Uninsured Rate Difference)"
) +
theme_minimal()
summary(medicaid_expansion$uninsured_rate)
summary(medicaid_expansion$treatment)
summary(medicaid_expansion$population)
medicaid_expansion <- medicaid_expansion %>%
filter(!is.na(uninsured_rate), !is.na(treatment), !is.na(population))
# augmented synthetic control
#define a treatment var. Uisng 2017 as first true post-treatment year since the adoption was mid-2016
medicaid_expansion <- medicaid_expansion %>%
mutate(treatment = if_else(State == "Louisiana" & year >= 2017, 1, 0))
# Run augmented synthetic control for Louisiana
# syn_louisiana <- augsynth(
#   uninsured_rate ~ treatment,   # outcome ~ treatment indicator
#   unit = State,                 # unit of analysis
#   time = year,                  # time variable
#   t_int = 2017,
#   data = medicaid_expansion,   # your dataset
#   unit_name = "Louisiana",     # treated unit
#   progfunc = "MCP",           # using matrix completion bc the internet says ridge won't do anything without covariates and we kind of don't have those, other than population I guess. I'll try adding population as a covariate
#   scm = TRUE                   # use synthetic control method
# )
#Ok I tried running the ridge a bunch of ways and it's still identical to non-augmented. going to try "MCP" above, if it's still identical I'm giving up
syn_louisiana <- augsynth(
form = uninsured_rate ~ treatment | population,  # outcome ~ treatment + covariate
unit = State,                                    # unit identifier
time = year,                                     # time variable
t_int = 2017,                                    # first treated period
data = medicaid_expansion,                       # data
unit_name = "Louisiana",                         # treated unit
progfunc = "ridge",                              # ridge regression for augmentation
scm = TRUE                                       # use synthetic control method
)
# # View summary of results
# this is not working not sure why
# summary(syn_louisiana)
#
#
# att <- summary(syn_louisiana)$att.avg
# imbalance <- summary(syn_louisiana)$imbalance
#
# print(att)
# print(imbalance)
syn_summary <- summary(syn_louisiana)
glimpse(syn_summary)
att <- syn_summary$average_att$Estimate
pval <- syn_summary$average_att$p_val
imbalance <- syn_summary$l2_imbalance
improvement <- 1 - (syn_summary$scaled_l2_imbalance / syn_summary$l2_imbalance)
print(att)
print(pval)
print(imbalance)
print(improvement)
str(syn_louisiana) # ridge data
head(syn_louisiana)
# Extract time and outcome values
#time_vals <- as.integer(colnames(syn_louisiana$data$X))  # Tried to get the years from column names
#needed to hard code it bc it was too hard to extract the years
time_vals <- 2008:2020
#time_vals <- syn_louisiana$data$synth_data$Y0plot[,1]  # Assuming time is the same for all units?
actual_vals <- syn_louisiana$data$synth_data$Y1plot[,1]  # treated LA outcome
synthetic_vals <- syn_louisiana$data$synth_data$Y0plot[,1]  # synthetic control outcome
# Check the extracted values
head(time_vals)
head(actual_vals)
print(synthetic_vals)
# Create a data frame with columns for Year, Actual, and Synthetic
outcome_df <- data.frame(
Year = time_vals,
Actual = actual_vals,
Synthetic = synthetic_vals
)
#is this working
head(outcome_df)
# Convert to long format for ggplot
# Make sure the reshaping process is working correctly
outcome_long_ridge <- pivot_longer(outcome_df,
cols = c("Actual", "Synthetic"),
names_to = "Type",
values_to = "UninsuredRate")
# Check the reshaped data frame
view(outcome_long_ridge)
view(outcome_long)
# Create the plot
#pre-treatment
ggplot(outcome_long, aes(x = Year, y = UninsuredRate, color = Type, linetype = Type)) +
geom_line(size = 1.2) +
geom_vline(xintercept = syn_louisiana$t_int, linetype = "dashed", color = "gray40") +  # Treatment time
labs(
title = "Actual vs Synthetic Uninsured Rate in Louisiana",
x = "Year",
y = "Uninsured Rate",
color = "Legend",
linetype = "Legend"
) +
theme_minimal()
# Extract ATT time-series
att_df <- summary(syn_louisiana)$att
ggplot(att_df, aes(x = Time, y = Estimate)) +
geom_line(color = "darkred", size = 1.2) +
geom_vline(xintercept = summary(syn_louisiana)$t_int, linetype = "dashed", color = "gray40") +
geom_hline(yintercept = 0, linetype = "solid", color = "black") +
labs(
title = "Post-Treatment Differences: Louisiana vs Synthetic Control",
subtitle = "Estimated ATT (Treated - Synthetic) Over Time",
x = "Year",
y = "ATT (Uninsured Rate Difference)"
) +
theme_minimal()
# barplots of weights
library(tibble)
summary(syn_louisiana)
print(names(donor_weights))
# barplots of weights
donor_weights <- coef(syn_louisiana)$weights
weights_df <- tibble(
State = names(donor_weights),
Weight = as.numeric(donor_weights)
)
summary(syn_louisiana)
print(names(donor_weights))
print(coef(syn_louisiana)$weights)
print(syn_louisiana$weights)
weights_df <- as.data.frame(syn_louisiana$weights) %>%
rownames_to_column(var = "State") %>%
rename(Weight = V1) %>%
filter(abs(Weight) > 1e-5)
glimpse(weights_df)
ggplot(weights_df, aes(x = reorder(State, Weight), y = Weight)) +
geom_bar(stat = "identity", fill = "dodgerblue") +
coord_flip() +
labs(
title = "Donor Weights for Synthetic Louisiana",
x = "Donor State",
y = "Weight"
) +
theme_minimal()
# barplots of weights
donor_weights <- coef(syn_louisiana)$weights
weights_df <- tibble(
State = names(donor_weights),
Weight = as.numeric(donor_weights)
)
summary(syn_louisiana)
print(names(donor_weights))
print(coef(syn_louisiana)$weights)
print(syn_louisiana$weights)
weights_df <- as.data.frame(syn_louisiana$weights) %>%
rownames_to_column(var = "State") %>%
rename(Weight = V1) %>%
filter(abs(Weight) > 1e-5)
glimpse(weights_df)
ggplot(weights_df, aes(x = reorder(State, Weight), y = Weight)) +
geom_bar(stat = "identity", fill = "dodgerblue") +
coord_flip() +
labs(
title = "Donor Weights for Synthetic Louisiana",
x = "Donor State",
y = "Weight"
) +
theme_minimal()
# Set CRAN mirror first
options(repos = c(CRAN = "https://cloud.r-project.org"))
# Then install packages
if (!requireNamespace("tinytex", quietly = TRUE)) {
install.packages("tinytex")
}
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
# Try installing directly from GitHub
if (!requireNamespace("MCPanel", quietly = TRUE)) {
devtools::install_github("shuyang1987/MCPanel")
}
if (!requireNamespace("multisynth", quietly = TRUE)) {
devtools::install_github("ebenmichael/multisynth")
}
options(repos = c(CRAN = "https://cloud.r-project.org"))
install.packages("tinytex")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("shuyang1987/MCPanel")
devtools::install_github("ebenmichael/multisynth")
options(repos = c(CRAN = "https://cloud.r-project.org"))
install.packages("multisynth")
devtools::install_github("synth-inference/multisynth")
R.version.string
devtools::install_github("synth-inference/multisynth", dependencies = TRUE, force = TRUE)
install.packages(c("Rcpp", "RcppArmadillo", "ggplot2", "tidyr", "dplyr", "magrittr"))
# Load required libraries
library(multisynth)
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
if (!requireNamespace("multisynth", quietly = TRUE)) {
devtools::install_github("ebenmichael/multisynth")
}
